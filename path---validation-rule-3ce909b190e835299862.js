webpackJsonp([0xd20672b4a927],{511:function(n,a){n.exports={data:{site:{siteMetadata:{title:"Magento 1 Frontend Bits",author:"Claire Parker-Jones"}},markdownRemark:{id:"/Users/Claire/gatsby-blog/src/pages/validation-rule/index.md absPath of file >>> MarkdownRemark",html:'<p>Magento 1 provides loads of validation rules out of the box, which cover most scenarios. It‚Äôs very common to check that a field contains only numbers, or isn‚Äôt blank. But how do you customise the validation message that displays when validation fails?</p>\n<p>Imagine you have a form field to capture a user‚Äôs nickname. This field is mandatory and must contain a value before submitting the form. So you do something like:</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>some-form<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nickname<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Nickname<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nickname<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nickname<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>required-entry<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Submit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">\n<span class="token keyword">var</span> someForm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VarienForm</span><span class="token punctuation">(</span><span class="token string">\'some-form\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre>\n      </div>\n<p>This short example demonstrates how to initialise form validation in Magento 1. Create a new <code>VarienForm</code> with the ID of the form. In each field that requires validation, set a class with the name corresponding to the relevant rule.</p>\n<p><code>required-entry</code> is the name of the rule that checks that the field contains a value. This means that if the user doesn‚Äôt enter anything in the <code>nickname</code> field, the form will fail to send. The error message ‚ÄúThis is a required field‚Äù will display underneath the nickname input.</p>\n<p>But how do you change this message to something more specific? You have to write a brand new validation rule of course!</p>\n<p>This involves duplicating the original <code>required-entry</code> rule, and changing the message. Find the original rule in the file <code>js/prototype/validation.js</code>, at <a href="https://github.com/OpenMage/magento-mirror/blob/magento-1.9/js/prototype/validation.js#421">line 421</a>.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code>Validation<span class="token punctuation">.</span><span class="token function">addAllThese</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n    <span class="token operator">...</span><span class="token punctuation">,</span>\n    <span class="token punctuation">[</span><span class="token string">\'required-entry\'</span><span class="token punctuation">,</span> <span class="token string">\'This is a required field.\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token operator">!</span>Validation<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">\'IsEmpty\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token operator">...</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>We need to amend the PrototypeJS method to add a single rule, and rename it. Place this new code within a script tag in your template, or better still in a separate file that holds all your custom validation rules.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code>Validation<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">\'validate-nickname\'</span><span class="token punctuation">,</span> <span class="token string">\'You must enter a nickname\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">!</span>Validation<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">\'IsEmpty\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>Finally, replace the classname <code>required-entry</code> with <code>validate-nickname</code> on the nickname form field. Submit the form with an empty nickname and the new error message will appear.</p>\n<p>Repeat as many times as needed for each custom error message. you can also use this technique on other exisiting rules and not only <code>required-entry</code>. Poke around in the core <code>validation.js</code> file and copy any rules that fit your purpose. Unfortunately this is tedious and repetitive if you have many form fields to customise, but that‚Äôs Magento 1! <code>¬Ø\\_(„ÉÑ)_/¬Ø</code> ü§∑‚Äç‚ôÄÔ∏è</p>',frontmatter:{title:"Setting a custom validation message",date:"February 28, 2018"}}},pathContext:{slug:"/validation-rule/",previous:{fields:{slug:"/cms-cms/"},frontmatter:{title:"How to output a CMS block from another CMS block"}},next:!1}}}});
//# sourceMappingURL=path---validation-rule-3ce909b190e835299862.js.map